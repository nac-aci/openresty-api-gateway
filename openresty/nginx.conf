
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

env LUA_SCRIPTS_FOLDER;

events {
    worker_connections  1024;
}


http {
    #lua_code_cache on;
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    init_by_lua_block {
        local custom_path = os.getenv("LUA_SCRIPTS_FOLDER")
        if custom_path then
            package.path = custom_path .. "/?.lua;" .. package.path
        end
    }

    server {
        listen  80;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    server {

        listen       443 ssl;
        server_name  localhost;
	    ssl_certificate     /home/cicd-dev/yabian_wkspace_1/aac-init/aac_init/interaction/force_api/openresty/cert/server.crt;
        ssl_certificate_key /home/cicd-dev/yabian_wkspace_1/aac-init/aac_init/interaction/force_api/openresty/cert/server.key;


        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';

        ssl_prefer_server_ciphers  on;

        location / {
            root   html;
            index  index.html index.htm;
        }

        location /login {
            content_by_lua_block {
                local login_module = require "login"
                local cjson = require "cjson"
                local token = login_module.generate_token()
                ngx.say(cjson.encode({ token = token }))
            }
        }

        location /api {
            access_by_lua_block {
                local handler = require "handler"
                local payload = handler.validate_jwt()
                if not payload then
                    ngx.status = 401
                    ngx.say({status = "error", message = "Unauthorized"})
                    return ngx.exit(401)
                end
                ngx.ctx.user_payload = payload
             }

            content_by_lua_block {
                local handler = require "handler"
                handler.proxy_request()
            }
        }
    }

}

